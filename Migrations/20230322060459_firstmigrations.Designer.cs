// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using back_end.Data;

#nullable disable

namespace back_end.Migrations
{
    [DbContext(typeof(MotorNationDB))]
    [Migration("20230322060459_firstmigrations")]
    partial class firstmigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryModel", b =>
                {
                    b.Property<int>("CategoriescategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ModelsmodelId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriescategoryId", "ModelsmodelId");

                    b.HasIndex("ModelsmodelId");

                    b.ToTable("CategoryModel");
                });

            modelBuilder.Entity("CountryNeighborhood", b =>
                {
                    b.Property<int>("CountriescountryId")
                        .HasColumnType("integer");

                    b.Property<int>("NeighborhoodsneightborhoodId")
                        .HasColumnType("integer");

                    b.HasKey("CountriescountryId", "NeighborhoodsneightborhoodId");

                    b.HasIndex("NeighborhoodsneightborhoodId");

                    b.ToTable("CountryNeighborhood");
                });

            modelBuilder.Entity("CountryState", b =>
                {
                    b.Property<int>("CountriescountryId")
                        .HasColumnType("integer");

                    b.Property<int>("StatesstateId")
                        .HasColumnType("integer");

                    b.HasKey("CountriescountryId", "StatesstateId");

                    b.HasIndex("StatesstateId");

                    b.ToTable("CountryState");
                });

            modelBuilder.Entity("NeighborhoodZipCode", b =>
                {
                    b.Property<int>("NeighborhoodsneightborhoodId")
                        .HasColumnType("integer");

                    b.Property<int>("ZipCodeszipCodeId")
                        .HasColumnType("integer");

                    b.HasKey("NeighborhoodsneightborhoodId", "ZipCodeszipCodeId");

                    b.HasIndex("ZipCodeszipCodeId");

                    b.ToTable("NeighborhoodZipCode");
                });

            modelBuilder.Entity("back_end.Data.Models.Agency", b =>
                {
                    b.Property<int>("agencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("agencyId"));

                    b.Property<string>("agencyDescription")
                        .HasColumnType("text")
                        .HasColumnName("agency_description");

                    b.Property<string>("agencyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("agency_name");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("layawaySystem")
                        .HasColumnType("boolean")
                        .HasColumnName("layaway_system");

                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<bool>("services")
                        .HasColumnType("boolean");

                    b.Property<bool>("testDrive")
                        .HasColumnType("boolean")
                        .HasColumnName("test_drive");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("agencyId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("back_end.Data.Models.AgencyCar", b =>
                {
                    b.Property<int>("agencyCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("agencyCarId"));

                    b.Property<int>("agencyId")
                        .HasColumnType("integer");

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("testDrive")
                        .HasColumnType("boolean")
                        .HasColumnName("test_drive");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("agencyCarId");

                    b.HasIndex("agencyId");

                    b.HasIndex("carId");

                    b.ToTable("agency_car");
                });

            modelBuilder.Entity("back_end.Data.Models.Car", b =>
                {
                    b.Property<int>("carId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("carId"));

                    b.Property<string>("carName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_name");

                    b.Property<string>("carSlug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_slug");

                    b.Property<int>("categoryId")
                        .HasColumnType("integer");

                    b.Property<string>("confort")
                        .HasColumnType("text");

                    b.Property<string>("confortGalery")
                        .HasColumnType("text")
                        .HasColumnName("confort_galery");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("force")
                        .HasColumnType("text");

                    b.Property<string>("forceGalery")
                        .HasColumnType("text")
                        .HasColumnName("force_galery");

                    b.Property<string>("galeryGeneralDescription")
                        .HasColumnType("text")
                        .HasColumnName("galery_general_description");

                    b.Property<string>("generalDescription")
                        .HasColumnType("text")
                        .HasColumnName("general_description");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("myth")
                        .HasColumnType("text");

                    b.Property<string>("mythGalery")
                        .HasColumnType("text")
                        .HasColumnName("myth_galery");

                    b.Property<string>("security")
                        .HasColumnType("text");

                    b.Property<string>("securityGalery")
                        .HasColumnType("text")
                        .HasColumnName("security_galery");

                    b.Property<string>("shorDescription")
                        .HasColumnType("text")
                        .HasColumnName("shor_description");

                    b.Property<string>("smart")
                        .HasColumnType("text");

                    b.Property<string>("smartGalery")
                        .HasColumnType("text")
                        .HasColumnName("smart_gaery");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("carId");

                    b.HasIndex("categoryId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("back_end.Data.Models.CatStatus", b =>
                {
                    b.Property<int>("catStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("catStatusId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("catStatusId");

                    b.ToTable("cat_status");
                });

            modelBuilder.Entity("back_end.Data.Models.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("categoryId"));

                    b.Property<string>("categoryDescription")
                        .HasColumnType("text")
                        .HasColumnName("category_description");

                    b.Property<string>("categoryImage")
                        .HasColumnType("text")
                        .HasColumnName("category_image");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("back_end.Data.Models.Contact", b =>
                {
                    b.Property<int>("contactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("contactId"));

                    b.Property<bool>("active")
                        .HasColumnType("boolean");

                    b.Property<string>("cellPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("coments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("contactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("back_end.Data.Models.Country", b =>
                {
                    b.Property<int>("countryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("countryId"));

                    b.Property<string>("countryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("countryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("back_end.Data.Models.EmailTemplate", b =>
                {
                    b.Property<int>("emailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("emailTemplateId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("emailName")
                        .HasColumnType("text");

                    b.Property<int>("emailTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("subject")
                        .HasColumnType("text");

                    b.Property<string>("template")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("emailTemplateId");

                    b.HasIndex("emailTypeId");

                    b.ToTable("email_template");
                });

            modelBuilder.Entity("back_end.Data.Models.EmailType", b =>
                {
                    b.Property<int>("emailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("emailTypeId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("listTo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("emailTypeId");

                    b.ToTable("cat_email_type");
                });

            modelBuilder.Entity("back_end.Data.Models.Inventory", b =>
                {
                    b.Property<int>("inventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("inventoryId"));

                    b.Property<int>("agencyCar")
                        .HasColumnType("integer");

                    b.Property<int>("countLayaway")
                        .HasColumnType("integer")
                        .HasColumnName("count_layaway");

                    b.Property<int>("countTestDrive")
                        .HasColumnType("integer")
                        .HasColumnName("count_test_drive");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("inventoryId");

                    b.HasIndex("agencyCar")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("back_end.Data.Models.Layaway", b =>
                {
                    b.Property<int>("layawayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("layawayId"));

                    b.Property<int>("agencyId")
                        .HasColumnType("integer");

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<int>("catStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("folio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("layawayId");

                    b.HasIndex("agencyId");

                    b.HasIndex("carId");

                    b.HasIndex("catStatusId");

                    b.HasIndex("userId");

                    b.ToTable("Layaway");
                });

            modelBuilder.Entity("back_end.Data.Models.Model", b =>
                {
                    b.Property<int>("modelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("modelId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("modelDescription")
                        .HasColumnType("text")
                        .HasColumnName("model_description");

                    b.Property<string>("modelImage")
                        .HasColumnType("text")
                        .HasColumnName("model_image");

                    b.Property<string>("modelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("modelId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("back_end.Data.Models.Neighborhood", b =>
                {
                    b.Property<int>("neightborhoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("neightborhoodId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("neightborhoodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("neightborhoodId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("back_end.Data.Models.Quotes", b =>
                {
                    b.Property<int>("quotesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("quotesId"));

                    b.Property<int>("agencyId")
                        .HasColumnType("integer");

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<int>("catStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("folio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("quotesId");

                    b.HasIndex("agencyId");

                    b.HasIndex("carId");

                    b.HasIndex("catStatusId");

                    b.HasIndex("userId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("back_end.Data.Models.ServicesSchedule", b =>
                {
                    b.Property<int>("servicesScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("servicesScheduleId"));

                    b.Property<int>("agencyId")
                        .HasColumnType("integer");

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<int>("catStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("kilometers")
                        .HasColumnType("integer");

                    b.Property<int>("modelYear")
                        .HasColumnType("integer")
                        .HasColumnName("model_year");

                    b.Property<DateOnly>("schedule")
                        .HasColumnType("date");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("servicesScheduleId");

                    b.HasIndex("agencyId");

                    b.HasIndex("carId");

                    b.HasIndex("catStatusId");

                    b.HasIndex("userId");

                    b.ToTable("services_schedule");
                });

            modelBuilder.Entity("back_end.Data.Models.SettingCar", b =>
                {
                    b.Property<int>("settingCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("settingCarId"));

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("parameterSettings")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parameter_settings");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<string>("settingCarName")
                        .HasColumnType("text")
                        .HasColumnName("setting_car_name");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("settingCarId");

                    b.HasIndex("carId");

                    b.ToTable("setting_car");
                });

            modelBuilder.Entity("back_end.Data.Models.State", b =>
                {
                    b.Property<int>("stateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("stateId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("stateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("stateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("back_end.Data.Models.TestDriveSchedule", b =>
                {
                    b.Property<int>("testDriveScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("testDriveScheduleId"));

                    b.Property<int>("agencyId")
                        .HasColumnType("integer");

                    b.Property<int>("carId")
                        .HasColumnType("integer");

                    b.Property<int>("catStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("comments")
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int>("modelYear")
                        .HasColumnType("integer")
                        .HasColumnName("model_year");

                    b.Property<DateOnly>("schedule")
                        .HasColumnType("date");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("testDriveScheduleId");

                    b.HasIndex("agencyId");

                    b.HasIndex("carId");

                    b.HasIndex("catStatusId");

                    b.HasIndex("userId");

                    b.ToTable("test_drive_schedule");
                });

            modelBuilder.Entity("back_end.Data.Models.User", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<int>("userTypeId")
                        .HasColumnType("integer");

                    b.HasKey("userId");

                    b.HasIndex("userTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("back_end.Data.Models.UserInfo", b =>
                {
                    b.Property<int>("userInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userInfoId"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("agencyId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("cellPhome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cell_phone");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("neighborhood")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("user")
                        .HasColumnType("uuid");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userInfoId");

                    b.HasIndex("user")
                        .IsUnique();

                    b.ToTable("user_info");
                });

            modelBuilder.Entity("back_end.Data.Models.UserType", b =>
                {
                    b.Property<int>("userTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("userTypeId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("userType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_type");

                    b.HasKey("userTypeId");

                    b.ToTable("cat_user_type");
                });

            modelBuilder.Entity("back_end.Data.Models.ZipCode", b =>
                {
                    b.Property<int>("zipCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("zipCodeId"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("updatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("zipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("zipCodeId");

                    b.ToTable("ZipCode");
                });

            modelBuilder.Entity("CategoryModel", b =>
                {
                    b.HasOne("back_end.Data.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriescategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Model", null)
                        .WithMany()
                        .HasForeignKey("ModelsmodelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryNeighborhood", b =>
                {
                    b.HasOne("back_end.Data.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriescountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("NeighborhoodsneightborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryState", b =>
                {
                    b.HasOne("back_end.Data.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriescountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeighborhoodZipCode", b =>
                {
                    b.HasOne("back_end.Data.Models.Neighborhood", null)
                        .WithMany()
                        .HasForeignKey("NeighborhoodsneightborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.ZipCode", null)
                        .WithMany()
                        .HasForeignKey("ZipCodeszipCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.Data.Models.AgencyCar", b =>
                {
                    b.HasOne("back_end.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("agencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("back_end.Data.Models.Car", b =>
                {
                    b.HasOne("back_end.Data.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("back_end.Data.Models.EmailTemplate", b =>
                {
                    b.HasOne("back_end.Data.Models.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("emailTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailType");
                });

            modelBuilder.Entity("back_end.Data.Models.Inventory", b =>
                {
                    b.HasOne("back_end.Data.Models.AgencyCar", "AgencyCar")
                        .WithOne("Inventory")
                        .HasForeignKey("back_end.Data.Models.Inventory", "agencyCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencyCar");
                });

            modelBuilder.Entity("back_end.Data.Models.Layaway", b =>
                {
                    b.HasOne("back_end.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("agencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.CatStatus", "CatStatus")
                        .WithMany()
                        .HasForeignKey("catStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Car");

                    b.Navigation("CatStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("back_end.Data.Models.Quotes", b =>
                {
                    b.HasOne("back_end.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("agencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.CatStatus", "CatStatus")
                        .WithMany()
                        .HasForeignKey("catStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Car");

                    b.Navigation("CatStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("back_end.Data.Models.ServicesSchedule", b =>
                {
                    b.HasOne("back_end.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("agencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.CatStatus", "CatStatus")
                        .WithMany()
                        .HasForeignKey("catStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Car");

                    b.Navigation("CatStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("back_end.Data.Models.SettingCar", b =>
                {
                    b.HasOne("back_end.Data.Models.Car", "car")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");
                });

            modelBuilder.Entity("back_end.Data.Models.TestDriveSchedule", b =>
                {
                    b.HasOne("back_end.Data.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("agencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.CatStatus", "CatStatus")
                        .WithMany()
                        .HasForeignKey("catStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("back_end.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Car");

                    b.Navigation("CatStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("back_end.Data.Models.User", b =>
                {
                    b.HasOne("back_end.Data.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("back_end.Data.Models.UserInfo", b =>
                {
                    b.HasOne("back_end.Data.Models.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("back_end.Data.Models.UserInfo", "user")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("back_end.Data.Models.AgencyCar", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();
                });

            modelBuilder.Entity("back_end.Data.Models.User", b =>
                {
                    b.Navigation("UserInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
